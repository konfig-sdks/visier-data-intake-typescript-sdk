/* tslint:disable */
/* eslint-disable */
/*
Visier Data Intake APIs

Visier APIs for sending raw or untransformed source data to Visier

The version of the OpenAPI document: 22222222.99201.1200


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Status } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * DataUploadApi - axios parameter creator
 * @export
 */
export const DataUploadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Use this API to upload data files to Visier. You can upload ZIP, CSV, XLS, and XLSX filetypes in plaintext or encrypted with Visier\'s PGP key. The maximum file upload size is 5 GB.   Use of this API requires client redirect. This API redirects requests directly to Visier\'s upload infrastructure to support long-running uploads.   To ensure efficient uploading, we recommend that you use an HTTP client that supports the 100 Continue status code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Upload a data file to Visier
         * @param {string} filename The filename of the data file to upload, including the file extension (such as .zip or .csv).
         * @param {Uint8Array | File | buffer.File} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileToVisier: async (filename: string, body?: Uint8Array | File | buffer.File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('fileToVisier', 'filename', filename)
            const localVarPath = `/v1alpha/data/upload/files/{filename}`
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename !== undefined ? filename : `-filename-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "apikey", keyParamName: "apiKeyAuth", configuration })
            // authentication BearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)
            // authentication CookieAuth required
            await setApiKeyToObject({object: localVarHeaderParameter, type: "Cookie", key: "Cookie", keyParamName: "VisierASIDToken", configuration})
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)
            // authentication OAuth2Auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2Auth", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: body,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v1alpha/data/upload/files/{filename}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataUploadApi - functional programming interface
 * @export
 */
export const DataUploadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataUploadApiAxiosParamCreator(configuration)
    return {
        /**
         * Use this API to upload data files to Visier. You can upload ZIP, CSV, XLS, and XLSX filetypes in plaintext or encrypted with Visier\'s PGP key. The maximum file upload size is 5 GB.   Use of this API requires client redirect. This API redirects requests directly to Visier\'s upload infrastructure to support long-running uploads.   To ensure efficient uploading, we recommend that you use an HTTP client that supports the 100 Continue status code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Upload a data file to Visier
         * @param {DataUploadApiFileToVisierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fileToVisier(requestParameters: DataUploadApiFileToVisierRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Status>> {
            const body: Uint8Array | File | buffer.File = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.fileToVisier(requestParameters.filename, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataUploadApi - factory interface
 * @export
 */
export const DataUploadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataUploadApiFp(configuration)
    return {
        /**
         * Use this API to upload data files to Visier. You can upload ZIP, CSV, XLS, and XLSX filetypes in plaintext or encrypted with Visier\'s PGP key. The maximum file upload size is 5 GB.   Use of this API requires client redirect. This API redirects requests directly to Visier\'s upload infrastructure to support long-running uploads.   To ensure efficient uploading, we recommend that you use an HTTP client that supports the 100 Continue status code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
         * @summary Upload a data file to Visier
         * @param {DataUploadApiFileToVisierRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fileToVisier(requestParameters: DataUploadApiFileToVisierRequest, options?: AxiosRequestConfig): AxiosPromise<Status> {
            return localVarFp.fileToVisier(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for fileToVisier operation in DataUploadApi.
 * @export
 * @interface DataUploadApiFileToVisierRequest
 */
export type DataUploadApiFileToVisierRequest = {
    /**
    * The filename of the data file to upload, including the file extension (such as .zip or .csv).
    * @type {string}
    * @memberof DataUploadApiFileToVisier
    */
    readonly filename: string
    /**
    * 
    * @type {Uint8Array | File | buffer.File}
    * @memberof DataUploadApiFileToVisier
    */
    readonly requestBody?: Uint8Array | File | buffer.File
}

/**
 * DataUploadApiGenerated - object-oriented interface
 * @export
 * @class DataUploadApiGenerated
 * @extends {BaseAPI}
 */
export class DataUploadApiGenerated extends BaseAPI {
    /**
     * Use this API to upload data files to Visier. You can upload ZIP, CSV, XLS, and XLSX filetypes in plaintext or encrypted with Visier\'s PGP key. The maximum file upload size is 5 GB.   Use of this API requires client redirect. This API redirects requests directly to Visier\'s upload infrastructure to support long-running uploads.   To ensure efficient uploading, we recommend that you use an HTTP client that supports the 100 Continue status code.   <br>**Note:** <em>This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).</em>
     * @summary Upload a data file to Visier
     * @param {DataUploadApiFileToVisierRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataUploadApiGenerated
     */
    public fileToVisier(requestParameters: DataUploadApiFileToVisierRequest, options?: AxiosRequestConfig) {
        return DataUploadApiFp(this.configuration).fileToVisier(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
